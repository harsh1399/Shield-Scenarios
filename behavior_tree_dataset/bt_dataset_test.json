[{"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree represents a robot's navigation system. It first computes a path using the global planner (ComputePathToPose) and then runs two sub-branches in parallel. The first sub-branch involves following the computed path using the local planner, while the second sub-branch controls the rate at which new paths are computed by the global planner.\n\nThe goal for the global planner and the resulting path are stored on the blackboard. The rate at which the ComputePathToPose operation is invoked can be controlled with the hz parameter to the RateController node.\n\nIf the FollowPath operation returns SUCCESS or FAILURE, the parallel node will return this result due to the threshold of 1 set for the Parallel node.\n\nOverall, the behavior tree orchestrates the navigation of the robot by computing paths, controlling their execution rates, and ensuring the robot follows the computed paths using the local planner.", "output": "<!--\n  This Behavior Tree first computes a path using the global planner (ComputePathToPose).\n  Then, it runs two sub-branches in parallel. The first sub-branch is a FollowPath\n  operation (the local planner). In parallel, there is a rate controlled execution of\n  FollowPath (the global planner). Each time a new path is computed, the path update\n  is sent to the local planner. The right branch, which is the rate controlled\n  ComputePathToPose, always returns RUNNING. Because the Parallel node uses a\n  threshold of 1, whenever the FollowPath returns SUCCESS or FAILURE, the parallel\n  node will return this result.\n\n  The goal (input to the global planner) and the resulting path (output of the global\n  planner and input to the local planner) are passed on the blackboard.\n\n  The rate at which the ComputePathToPose operation is invoked can be controlled with\n  the hz parameter to the RateController node.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"root\">\n      <RateController hz=\"1.0\">\n        <Fallback>\n          <GoalReached/>\n          <ComputePathToPose goal=\"${goal}\"/>\n        </Fallback>\n      </RateController>\n      <FollowPath path=\"${path}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree is designed to navigate a robot with the capability of replanning its global path after every 1 meter of movement. It uses a pipeline sequence consisting of two steps. First, it employs a distance controller to compute a new path to the goal pose using a \"GridBased\" planner when the robot has moved 1 meter. Then, it follows the computed path using a specified controller. This approach ensures that the robot continuously updates its path to adapt to any changes in the environment or obstacles encountered during navigation.", "output": "<!--\n  This Behavior Tree replans the global path after every 1m.\n-->\n\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <PipelineSequence name=\"NavigateWithReplanning\">\n      <DistanceController distance=\"1.0\">\n        <ComputePathToPose goal=\"{goal}\" path=\"{path}\" planner_id=\"GridBased\"/>\n      </DistanceController>\n      <FollowPath path=\"{path}\"  controller_id=\"FollowPath\"/>\n    </PipelineSequence>\n  </BehaviorTree>\n</root>\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree represents a sequence of actions for performing arithmetic operations. It starts by printing a message indicating the start of an \"AddTwoInts\" demonstration, followed by printing the values of variables 'a' and 'b'. Then it adds 'a' and 'b', prints the result, adds 100 to the previous sum, prints the new sum, doubles the sum, and finally prints the doubled value.\n\nIn summary, the behavior tree demonstrates the process of adding two integers, then adding 100 to the result, and finally doubling the sum. This sequence showcases a step-by-step arithmetic operation using the provided variables 'a' and 'b'.", "output": "<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <Sequence name=\"Sequence\">\n    \t<Print message=\"=== AddTwoInts demo ===\"/>\n    \t<Print message=\"a\"/>\n    \t<Print message=\"{a}\"/>\n    \t<Print message=\"b\"/>\n    \t<Print message=\"{b}\"/>\n    \t<AddTwoInts a=\"{a}\" b=\"{b}\" sum=\"{sum}\"/>\n    \t<Print message=\"a+b =\"/>\n    \t<Print message=\"{sum}\"/>\n    \t<AddTwoInts a=\"{sum}\" b=\"100\" sum=\"{sum}\"/>\n    \t<Print message=\"+100 =\"/>\n    \t<Print message=\"{sum}\"/>\n    \t<AddTwoInts a=\"{sum}\" b=\"{sum}\" sum=\"{sum}\"/>\n    \t<Print message=\"*2 =\"/>\n    \t<Print message=\"{sum}\"/>\n    </Sequence>\n  </BehaviorTree>\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree outlines the decision-making process for an autonomous vehicle. The vehicle is programmed to follow a sequence of actions based on various conditions and events encountered during its mission.\n\nThe main behavior tree \"BehaviorTree\" consists of a fallback node \"Core_seq\" that contains sequences of actions and conditions. These include initializing, generating global and local paths, checking for obstacles, making lane changes, and following specific driving rules like keeping lanes and stopping at stop lines.\n\nAdditionally, there is a sub-tree \"treeGenGlobalFollowPath\" which handles the generation of a global path for the vehicle to follow.\n\nThe entire behavior tree is driven by a set of conditions and actions defined in the \"TreeNodesModel\".\n\nIn summary, the behavior tree orchestrates the decision-making process for the autonomous vehicle, guiding it through different stages of its mission such as path planning, obstacle avoidance, and adherence to traffic rules.", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence>\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence>\n                <Action ID=\"init\"/>\n                <Action ID=\"genGlobalFollowPath\"/>\n                <Fallback name=\"mission_start\">\n                    <Sequence>\n                        <Condition ID=\"checkFrontObject\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkIsGlobalFollow\"/>\n                                <Fallback name=\"loc_check\">\n                                    <Sequence>\n                                        <Condition ID=\"checkNearCorner\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkNearStopline\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkProfitKeeplane\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                </Fallback>\n                            </Sequence>\n                            <Fallback name=\"lane_check\">\n                                <Sequence>\n                                    <Condition ID=\"checkLaneChange\"/>\n                                    <Fallback name=\"lane_check\">\n                                        <Sequence>\n                                            <Condition ID=\"checkLeftchageAble\"/>\n                                            <Fallback>\n                                                <Sequence>\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeLeft\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Fallback>\n                                            <Sequence>\n                                                <Condition ID=\"checkCollision\"/>\n                                                <Action ID=\"keepLane\"/>\n                                            </Sequence>\n                                            <Action ID=\"laneChangeRight\"/>\n                                        </Fallback>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"Local_path\">\n                                    <Sequence>\n                                        <Condition ID=\"checkEmptyLocal\"/>\n                                        <Sequence name=\"Gen_Local\">\n                                            <Action ID=\"stop\"/>\n                                            <Action ID=\"genLocalPath\"/>\n                                            <Action ID=\"setStartLocal\"/>\n                                        </Sequence>\n                                    </Sequence>\n                                    <Fallback name=\"local_check\">\n                                        <Sequence>\n                                            <Condition ID=\"checkFinishLocal\"/>\n                                            <Action ID=\"setFinishLocal\"/>\n                                        </Sequence>\n                                        <Sequence>\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"stop\"/>\n                                        </Sequence>\n                                        <Action ID=\"localPathfollow\"/>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence>\n                        <Condition ID=\"checkNearStopline\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkPassAble\"/>\n                                <Sequence>\n                                    <Sequence>\n                                        <Condition ID=\"checkCollision\"/>\n                                        <Action ID=\"stop\"/>\n                                    </Sequence>\n                                    <Action ID=\"drive\"/>\n                                </Sequence>\n                            </Sequence>\n                            <Action ID=\"stop\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"drive\"/>\n                </Fallback>\n                <Action ID=\"setPath\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"treeGenGlobalFollowPath\">\n        <Fallback>\n            <Sequence>\n                <Condition ID=\"checkGlobalLaneChange\"/>\n                <Fallback>\n                    <Sequence>\n                        <Condition ID=\"checkLetfChange\"/>\n                        <Fallback>\n                            <Sequence>\n                                <Condition ID=\"checkCollision\"/>\n                                <Action ID=\"keepLane\"/>\n                            </Sequence>\n                            <Action ID=\"laneChangeLeft\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Fallback>\n                        <Sequence>\n                            <Condition ID=\"checkCollision\"/>\n                            <Action ID=\"keepLane\"/>\n                        </Sequence>\n                        <Action ID=\"laneChangeRight\"/>\n                    </Fallback>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"genGlobalFollowPath\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkEmptyLocal\"/>\n        <Condition ID=\"checkFinishLocal\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkIsGlobalFollow\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLeftchageAble\"/>\n        <Condition ID=\"checkLetfChange\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkPassAble\"/>\n        <Condition ID=\"checkProfitKeeplane\"/>\n        <Action ID=\"drive\"/>\n        <Action ID=\"genGlobalFollowPath\"/>\n        <Action ID=\"genLocalPath\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"keepLane\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"localPathFollow\"/>\n        <Action ID=\"localPathfollow\"/>\n        <Action ID=\"setFinishLocal\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStartLocal\"/>\n        <Action ID=\"stop\"/>\n        <SubTree ID=\"treeGenGlobalFollowPath\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree controls a robot's movement towards three different goals, Goal_a, Goal_b, and Goal_c. The robot is programmed to move sequentially towards each goal, with a waiting period between movements. If the \"gohome\" event is triggered, the robot will interrupt its current sequence and proceed directly to Goal_c. The waiting time between movements is set by the value of \"Waiting_time\". This sequence of moving towards Goal_a, waiting, moving towards Goal_b, and waiting is repeated indefinitely (-1 cycles). Once the robot completes or interrupts this repeating sequence, it proceeds to Goal_c.\n\nIn summary, the behavior tree orchestrates the robot's navigation behavior, ensuring it moves towards specific goals in a predefined sequence, with interruptions possible based on external events, and incorporates waiting periods between movements.", "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence>\n            <SetBlackboard output_key=\"Goal_a\" value=\"1.17;-1.65;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_b\" value=\"1.1;1.51;0.0;1.0\" />\n            <SetBlackboard output_key=\"Goal_c\" value=\"-1.25;0.324;0.0;1.0\" />\n            <SetBlackboard output_key=\"Waiting_time\" value=\"2\"/>\n            <Fallback>\n                <ReactiveSequence>\n                    <InterruptEvent event=\"gohome\"/>\n                    <Repeat num_cycles=\"-1\">\n                        <Sequence>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                            <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                            <WaitingEvent name=\"waiting_event\" waiting_time=\"{Waiting_time}\"/>\n                        </Sequence>\n                    </Repeat>\n                </ReactiveSequence>\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                </Sequence>\n            </Fallback>\n        </Sequence>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <MoveBase goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree orchestrates a robot's movement to three different goals (Goal_a, Goal_b, Goal_c) in a repeated sequence for 3 cycles. The robot is directed to move to each goal sequentially and upon reaching each goal, it vocalizes its achievement through a text-to-speech action. This process is then repeated for the specified number of cycles.\n\nIn summary, the behavior tree controls the robot's navigation by setting goals, moving the robot to these goals using a navigation client, and providing verbal feedback at each location. This enables the robot to autonomously navigate to multiple destinations and communicate its progress.", "output": "<root main_tree_to_execute = \"MainTree\">\n    <BehaviorTree ID=\"MainTree\">\n        <Repeat num_cycles=\"3\">\n            <Sequence>\n                <SetBlackboard output_key=\"Goal_a\" value=\"-5.40;-5.37;0.707;-0.707\" />\n                <SetBlackboard output_key=\"Goal_b\" value=\"-3.94;-4.47;0.707;-0.707\" />\n                <SetBlackboard output_key=\"Goal_c\" value=\"-4.79;-6.87;0.707;-0.707\" />\n                <Sequence>\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_a\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal A\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_b\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal B\" />\n                    <SubTree ID=\"MoveRobot\" target=\"Goal_c\" />\n                    <TextToSpeechActionClient msg=\"I'm at goal C\" />\n                </Sequence>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n\n    <BehaviorTree ID=\"MoveRobot\">\n        <Sequence name=\"SetGoal\">\n            <Nav2Client goal=\"{target}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree consists of a sequence of actions, where the robot will perform \"go1\" action within nested sequences. The specific details of what \"go1\" entails are not provided in the given XML.\n\nThis behavior tree seems to be a simplified representation, lacking explicit conditions or branching logic. It suggests a linear execution flow where \"go1\" is the primary action to be performed.\n\nWithout further context on the actions and their implications, it's challenging to provide a more detailed summary of the task being performed by this behavior tree.", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Sequence>\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                </Sequence>\n            </Sequence>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree represents a decision-making process for an autonomous vehicle. The vehicle's actions are determined by various conditions and sequences within the tree. \n\nThe tree starts with a fallback node, which contains multiple sequences and conditions. It checks for mission wait, existence of a global path, and potential lane changes based on certain conditions. If these conditions are met, it initializes actions such as generating paths, changing lanes, or following a global path.\n\nFurther, the tree evaluates if there are obstacles in front, and based on that, decides whether to change lanes, follow local paths, or stop. Additionally, it considers factors like proximity to stop lines and corners, collision risks, and profitability of keeping the current lane.\n\nOverall, the behavior tree orchestrates the vehicle's decision-making process, encompassing actions related to navigation, obstacle avoidance, lane changes, and path following based on a set of predefined conditions and sequences.", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Core_seq\">\n            <Sequence name=\"\">\n                <Condition ID=\"checkMissionWait\"/>\n                <Action ID=\"stop\"/>\n            </Sequence>\n            <Sequence name=\"\">\n                <Sequence name=\"\">\n                    <Condition ID=\"checkExistPathGlobal\"/>\n                    <Action ID=\"init\"/>\n                    <Fallback name=\"\">\n                        <Sequence name=\"\">\n                            <Condition ID=\"checkGlobalLaneChange\"/>\n                            <Fallback name=\"\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkLeftChange\"/>\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkGenPathLaneChange\"/>\n                                        <Action ID=\"genPathLaneChangeLeft\"/>\n                                    </Fallback>\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"keepLane\"/>\n                                        </Sequence>\n                                        <Action ID=\"laneChangeLeft\"/>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"\">\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkGenPathLaneChange\"/>\n                                        <Action ID=\"genPathLaneChangeRight\"/>\n                                    </Fallback>\n                                    <Fallback name=\"\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"keepLane\"/>\n                                        </Sequence>\n                                        <Action ID=\"laneChangeRight\"/>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Sequence>\n                        <Action ID=\"genGlobalFollowPath\"/>\n                    </Fallback>\n                </Sequence>\n                <Fallback name=\"\">\n                    <Sequence name=\"\">\n                        <Condition ID=\"checkFrontObject\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkIsGlobalFollow\"/>\n                                <Fallback name=\"loc_check\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkNearCorner\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkNearStopline\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkProfitKeeplane\"/>\n                                        <Action ID=\"acc\"/>\n                                    </Sequence>\n                                </Fallback>\n                            </Sequence>\n                            <Fallback name=\"lane_check\">\n                                <Sequence name=\"\">\n                                    <Condition ID=\"checkLaneChange\"/>\n                                    <Fallback name=\"lane_check\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkLeftchageAble\"/>\n                                            <Fallback name=\"\">\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                                <Action ID=\"genPathLaneChangeLeft\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeLeft\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Fallback name=\"\">\n                                                <Condition ID=\"checkGenPathLaneChange\"/>\n                                                <Action ID=\"genPathLaneChangeRight\"/>\n                                            </Fallback>\n                                            <Fallback name=\"\">\n                                                <Sequence name=\"\">\n                                                    <Condition ID=\"checkCollision\"/>\n                                                    <Action ID=\"keepLane\"/>\n                                                </Sequence>\n                                                <Action ID=\"laneChangeRight\"/>\n                                            </Fallback>\n                                        </Sequence>\n                                    </Fallback>\n                                </Sequence>\n                                <Sequence name=\"Local_path\">\n                                    <Fallback name=\"\">\n                                        <Condition ID=\"checkEmptyLocal\"/>\n                                        <Sequence name=\"Gen_Local\">\n                                            <Action ID=\"stop\"/>\n                                            <Action ID=\"genLocalPath\"/>\n                                            <Action ID=\"setStartLocal\"/>\n                                        </Sequence>\n                                    </Fallback>\n                                    <Fallback name=\"local_check\">\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkFinishLocal\"/>\n                                            <Action ID=\"setFinishLocal\"/>\n                                        </Sequence>\n                                        <Sequence name=\"\">\n                                            <Condition ID=\"checkCollision\"/>\n                                            <Action ID=\"stop\"/>\n                                            <Action ID=\"genLocalPath\"/>\n                                        </Sequence>\n                                        <Action ID=\"localPathfollow\"/>\n                                    </Fallback>\n                                </Sequence>\n                            </Fallback>\n                        </Fallback>\n                    </Sequence>\n                    <Sequence name=\"\">\n                        <Condition ID=\"checkNearStopline\"/>\n                        <Fallback name=\"\">\n                            <Sequence name=\"\">\n                                <Condition ID=\"checkPassAble\"/>\n                                <Sequence name=\"\">\n                                    <Sequence name=\"\">\n                                        <Condition ID=\"checkCollision\"/>\n                                        <Action ID=\"stop\"/>\n                                    </Sequence>\n                                    <Action ID=\"drive\"/>\n                                </Sequence>\n                            </Sequence>\n                            <Action ID=\"stop\"/>\n                        </Fallback>\n                    </Sequence>\n                    <Action ID=\"drive\"/>\n                </Fallback>\n                <Action ID=\"setPath\"/>\n            </Sequence>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"acc\"/>\n        <Condition ID=\"checkCollision\"/>\n        <Condition ID=\"checkEmptyLocal\"/>\n        <Condition ID=\"checkExistPathGlobal\"/>\n        <Condition ID=\"checkFinishLocal\"/>\n        <Condition ID=\"checkFrontObject\"/>\n        <Condition ID=\"checkGenPathLaneChange\"/>\n        <Condition ID=\"checkGlobalLaneChange\"/>\n        <Condition ID=\"checkInitPose\"/>\n        <Condition ID=\"checkIsGlobalFollow\"/>\n        <Condition ID=\"checkLaneChange\"/>\n        <Condition ID=\"checkLeftChange\"/>\n        <Condition ID=\"checkLeftchageAble\"/>\n        <Condition ID=\"checkMissionWait\"/>\n        <Condition ID=\"checkNearCorner\"/>\n        <Condition ID=\"checkNearStopline\"/>\n        <Condition ID=\"checkPassAble\"/>\n        <Condition ID=\"checkProfitKeeplane\"/>\n        <Action ID=\"drive\"/>\n        <Action ID=\"genGlobalFollowPath\"/>\n        <Action ID=\"genLocalPath\"/>\n        <Action ID=\"genPathLaneChangeLeft\"/>\n        <Action ID=\"genPathLaneChangeRight\"/>\n        <Action ID=\"init\"/>\n        <Action ID=\"keepLane\"/>\n        <Action ID=\"laneChangeLeft\"/>\n        <Action ID=\"laneChangeRight\"/>\n        <Action ID=\"localPathFollow\"/>\n        <Action ID=\"localPathfollow\"/>\n        <Action ID=\"setFinishLocal\"/>\n        <Action ID=\"setPath\"/>\n        <Action ID=\"setStartLocal\"/>\n        <Action ID=\"stop\"/>\n        <SubTree ID=\"treeGenGlobalFollowPath\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree outlines the task for a robot. Initially, it disables pose detection and tracking actions. Then, it repeats a sequence three times. Within each repetition, the robot performs a text-to-speech action to announce the start of a spin cycle. Following this, it executes a reactive sequence: if no person is detected, the robot spins 360 degrees at a velocity of 0.5. This process is repeated for a total of three cycles.\n\nOverall, the behavior tree sets up a scenario where the robot will perform a spinning action unless a person is detected, in which case it will not execute the spinning action.", "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence>\n  \t\t<PoseDetectionControlAction enable=\"false\" />\n\t\t\t<TrackAction mode=\"none\" rate=\"none\" />\n\t\t\t<Repeat num_cycles=\"3\">\n\t\t\t\t<Sequence>\n\t\t\t\t\t<TextToSpeechActionClient msg=\"Starting spin cycle\" />\n\t\t\t\t\t<ReactiveSequence>\n\t\t\t\t\t\t<Inverter>\n\t\t\t\t\t\t\t<ObjectDetectionAction class=\"person\" pose=\"detected_Pose\" />\n\t\t\t\t\t\t</Inverter>\n\t\t\t\t\t\t<RobotSpin angle=\"360\" velocity=\"0.5\" />\n\t\t\t\t\t</ReactiveSequence>\n\t\t\t\t</Sequence>\n\t\t\t</Repeat>\n\t\t</Sequence>\n\n\t</BehaviorTree>\n</root>\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree defines a sequence of actions for a system. It first attempts to execute \"go1\", and if that fails, it will proceed with \"go2\". If both \"go1\" and \"go2\" fail, the system will perform \"go2\". The available actions include \"alwaysTrue\", \"dumpRun\", \"go1\", \"go2\", \"go3\", \"goClosestR\", \"guardAiMovement\", \"isFull\", \"mineResource\", and \"waitFrames\".\n\nIn summary, the behavior tree outlines a prioritized set of actions for the system to follow, where it tries to execute \"go1\" first, then \"go2\" if needed. If both fail, it defaults to \"go2\".", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Fallback>\n                <Sequence>\n                    <Action ID=\"go1\"/>\n                </Sequence>\n            </Fallback>\n            <Action ID=\"go2\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"alwaysTrue\"/>\n        <Action ID=\"dumpRun\"/>\n        <Action ID=\"go1\"/>\n        <Action ID=\"go2\"/>\n        <Action ID=\"go3\"/>\n        <Action ID=\"goClosestR\"/>\n        <Action ID=\"guardAiMovement\"/>\n        <Action ID=\"isFull\"/>\n        <Action ID=\"mineResource\"/>\n        <Action ID=\"waitFrames\">\n            <input_port name=\"_in_0\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree represents a robot's task of finding and fetching a bottle. The robot first attempts to find the room where the bottle is located, and if it knows the room, it goes there; otherwise, it follows a human for guidance. After reaching the room, it searches for the bottle and then fetches it. If at any point the robot encounters difficulty, it will ask for help.", "output": "<root main_tree_to_execute = \"MainTree\" >\n\n  <BehaviorTree ID=\"MainTree\">\n    <Fallback name = \"root\">\n      <Sequence name=\"find_and_fetch\">\n        <Fallback name = \"pippo\">\n          <Sequence name = \"pluto\">\n            <Condition ID=\"Room_known\" />\n            <Action ID=\"Go_to_room\" />\n          </Sequence>\n          <Action ID=\"Follow_human\" />\n        </Fallback>\n        <Action ID=\"Find_bottle\" />\n        <Action ID=\"Fetch_bottle\" />\n      </Sequence>\n      <Action ID=\"Ask_for_help\" />\n    </Fallback>\n  </BehaviorTree>\n\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree outlines the decision-making process for a robot tasked with interacting with a ball and a bin. The robot follows a sequence of actions, attempting to find and interact with the ball and the bin in a specific order. It first attempts to find the ball, then approaches it if it's close enough, grasps it once it's found, finds the bin, approaches the bin, and finally places the ball in the bin. If at any point the robot is unable to complete an action, it will ask for help.\n\nThis behavior tree reflects a hierarchical decision-making process where the robot prioritizes finding and interacting with the ball before moving on to the bin. If any step fails, it resorts to asking for assistance.", "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!--  -----------------------------------  -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback name=\"Fallback1\">\n            <Sequence>\n                <Fallback name=\"Fallback2\">\n                    <Condition ID=\"BallFound\"/>\n                    <Action ID=\"FindBall\"/>\n                </Fallback>\n                <Fallback name=\"Fallback3\">\n                    <Condition ID=\"BallClose\" thd=\"10\"/>\n                    <Action ID=\"ApproachBall\"/>\n                </Fallback>\n                <Fallback name=\"Fallback4\">\n                    <Condition ID=\"BallGrasped\"/>\n                    <Action ID=\"GraspBall\"/>\n                </Fallback>\n                <Fallback name=\"Fallback5\">\n                    <Condition ID=\"BinFound\"/>\n                    <Action ID=\"FindBin\"/>\n                </Fallback>\n                <Fallback name=\"Fallback6\">\n                    <Condition ID=\"BinClose\"/>\n                    <Action ID=\"ApproachBin\"/>\n                </Fallback>\n                <Fallback name=\"Fallback7\">\n                    <Condition ID=\"BallPlaced\"/>\n                    <Action ID=\"PlaceBall\"/>\n                </Fallback>\n            </Sequence>\n            <Action ID=\"AskForHelp\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  -----------------------------------  -->\n    <TreeNodesModel>\n        <Action ID=\"ApproachBall\"/>\n        <Action ID=\"ApproachBin\"/>\n        <Action ID=\"AskForHelp\"/>\n        <Condition ID=\"BallClose\"/>\n        <Condition ID=\"BallFound\"/>\n        <Condition ID=\"BallGrasped\"/>\n        <Condition ID=\"BallPlaced\"/>\n        <Condition ID=\"BinClose\"/>\n        <Condition ID=\"BinFound\"/>\n        <Action ID=\"FindBall\"/>\n        <Action ID=\"FindBin\"/>\n        <Action ID=\"GraspBall\"/>\n        <Action ID=\"PlaceBall\"/>\n    </TreeNodesModel>\n    <!--  -----------------------------------  -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree orchestrates a robot's actions. It begins by setting the velocity to 3 and saying \"Hello\". Then, it executes two sub-trees, Variant1 and Variant2, in sequence, followed by an always successful action. Afterward, it opens the gripper, approaches an object with the previously set velocity, closes the gripper, and finally says \"Bye\". This sequence of actions likely represents a robotic task such as approaching an object, manipulating it, and then concluding the task. The behavior tree is designed to ensure the robot follows this specific sequence of actions.", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root main_tree_to_execute = \"MainTree\" >\n\t<!-- The include paths need to be adapted to the ones required by the interpreter -->\n\t<include path = \"variant1.xml\"/>\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<Sequence name=\"root_sequence\">\n\t\t\t<SetBlackboard output_key = \"vp_velocity\" value = \"3\"/>\n\t\t\t<Action ID=\"SaySomething\"   name=\"action_hello\" message=\"Hello\"/>\n\t\t\t<Sequence>\n\t\t\t\t<SubTree ID = \"Variant1\"/>\n\t\t\t\t<SubTree ID = \"Variant2\"/> \n\t\t\t\t<AlwaysSuccess/> \n\t\t\t</Sequence >\t\t\t\n\t\t\t<Action ID=\"OpenGripper\"    name=\"open_gripper\"/>\n\t\t\t<Action ID=\"ApproachObject\" name=\"approach_object\" velocity=\"{vp_velocity}\"/>\n\t\t\t<Action ID=\"CloseGripper\"   name=\"close_gripper\"/>\n\t\t\t<Action ID=\"SaySomething\"   name=\"action_bye\" message=\"Bye\"/>\n        </Sequence>\n     </BehaviorTree>\n</root >\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree orchestrates a social robot's interactions over a period of 100 cycles. During each cycle, the robot performs a sequence of actions. It first checks the time using \"Chrono\", then attempts a social interaction with another agent (\"agent_3\") by navigating to a specific goal (\"hri\"). If this social interaction fails, it navigates back home (\"navigate_to_wp\" with goal \"home\"), turns, and writes data to a CSV file.\n\nThis behavior is designed for a social robot to engage in repeated social interactions while also ensuring it can navigate back home, record its activities, and manage its overall behavior within a defined timeframe.", "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <Repeat num_cycles=\"100\">\n                <Sequence name=\"social_interaction\">\n                    <Chrono/>\n                    <ReactiveFallback name=\"SocialActionFallback\">\n                        <isGoalReached/>\n                        <SocialNav2Action \n                            name=\"social_nav2_action\" \n                            goal=\"hri\" \n                            agent_id=\"agent_3\"/>\n                    </ReactiveFallback>\n                    <NavigateToWp  name=\"navigate_to_wp\" goal=\"home\"/>\n                    <TurnAgent/>\n                    <WriteCSV/>\n                </Sequence>\n            </Repeat>\n        </Sequence>\n     </BehaviorTree>\n</root>"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree represents a robotic system that controls the movement and blinking of its antennas. The system is designed to continuously run a sequence of actions until it encounters a failure. \n\nInitially, the system activates the antennas with a specific rate and intensity, causing them to blink in a certain pattern for 3 seconds. After this, there is another delay of 3 seconds before the antennas are activated again with a different rate and intensity, resulting in a new blinking pattern. Following another 9-second delay, the antennas are once more activated with an altered rate, intensity, and blinking pattern.\n\nIn summary, the behavior tree orchestrates a continuous cycle where the robot's antennas undergo predefined actions involving activation, delays, and changes in blinking patterns. This process continues indefinitely unless a failure occurs.", "output": "<root main_tree_to_execute=\"MainTree\">\n\t<BehaviorTree ID=\"MainTree\">\n\t\t<KeepRunningUntilFailure>\n\t\t\t<Sequence>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<AntennaAction rate=\"0\" intensity=\"10\" left_blink_pattern=\"01\" right_blink_pattern=\"10\" />\n\t\t\t\t</Delay>\n\t\t\t\t<Delay delay_msec=\"3000\">\n\t\t\t\t\t<AntennaAction rate=\"5\" intensity=\"100\" left_blink_pattern=\"01\" right_blink_pattern=\"10\" />\n\t\t\t\t</Delay>\n        \t\t<Delay delay_msec=\"9000\">\n          \t\t\t<AntennaAction rate=\"10\" intensity=\"100\" left_blink_pattern=\"111100000\" right_blink_pattern=\"00001111\" />\n        \t\t</Delay>\n\t\t\t</Sequence>\n\t\t</KeepRunningUntilFailure>\n\t</BehaviorTree>\n</root>\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree defines a sequence of tasks for a robot. First, it calculates a goal position and then prints the target position. Next, it sets another goal position and prints this new target. The overall task seems to involve setting and printing different goal positions for the robot to follow.", "output": "<root main_tree_to_execute = \"MainTree\" >\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"root_sequence\">\n            <CalculateGoal   goal=\"{GoalPosition}\" />\n            <PrintTarget     target=\"{GoalPosition}\" />\n            <SetBlackboard   output_key=\"OtherGoal\" value=\"-1;3\" />\n            <PrintTarget     target=\"{OtherGoal}\" />\n        </Sequence>\n    </BehaviorTree>\n</root>\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree represents a robotic system tasked with peg manipulation. The robot is programmed to perform a sequence of actions based on reactive conditions and parallel processes. \n\nFirst, the robot checks if it is within close proximity to a specific goal position. If not, it simultaneously configures its motion and checks for the goal condition. If the goal condition is met, the robot proceeds to execute a search motion based on a threshold for the z-coordinate. \n\nSimultaneously, the robot configures its motion again and sets a new goal position. These two processes run in parallel, and both require meeting success thresholds.\n\nOverall, the behavior tree orchestrates the robot's actions by reacting to different conditions and executing multiple tasks concurrently to achieve the peg manipulation task.", "output": "<root main_tree_to_execute = \"PegTree\" >\n    <BehaviorTree ID=\"PegTree\">\n    <ReactiveFallback name=\"root_sequence\">\n        <ReactiveSequence name=\"goal_condition\">\n            <EEPositionDistance name=\"goal_check\"\n                threshold=\"0.05\"\n                target_x=\"-0.6\"\n                target_y=\"0.0\"\n                target_z=\"0.64\"\n                ee_x=\"{ee_x}\"\n                ee_y=\"{ee_y}\"\n                ee_z=\"{ee_z}\"/>\n            <Parallel name=\"mg_config_goal_and_check\" success_threshold=\"1\" failure_threshold=\"1\">\n                <SetMGSin   name=\"mg_sinus\"\n                    mp_ampl=\"0\"\n                    mp_freq=\"0\"\n                    mg_ampl=\"{mg_ampl}\"\n                    mg_freq=\"{mg_freq}\"/>\n                <SetMGGoal   name=\"mg_goal1\"\n                    mp_param_x=\"-0.6\"\n                    mp_param_y=\"0.0\"\n                    mp_param_z=\"0.73\"\n                    mg_trans_x=\"{mg_trans_x}\"\n                    mg_trans_y=\"{mg_trans_y}\"\n                    mg_trans_z=\"{mg_trans_z}\"/>\n                <EEPositionDistance name=\"goal_check\"\n                    threshold=\"0.05\"\n                    target_x=\"-0.6\"\n                    target_y=\"0.0\"\n                    target_z=\"0.64\"\n                    ee_x=\"{ee_x}\"\n                    ee_y=\"{ee_y}\"\n                    ee_z=\"{ee_z}\"/>\n            </Parallel>\n        </ReactiveSequence>\n        <ReactiveSequence name=\"search_motion\">\n            <EEZThreshold   name=\"ee_z_threshold\" threshold=\"{z_threshold}\" ee_z=\"{ee_z}\" above=\"false\"/>\n                <SetMGSin   name=\"mg_sinus\"\n                    mp_ampl=\"{mp_ampl}\"\n                    mp_freq=\"{mp_freq}\"\n                    mg_ampl=\"{mg_ampl}\"\n                    mg_freq=\"{mg_freq}\"/>\n        </ReactiveSequence>\n        <Parallel name=\"mg_config\" success_threshold=\"1\" failure_threshold=\"1\">\n            <SetMGSin   name=\"mg_sinus\"\n                mp_ampl=\"0\"\n                mp_freq=\"0\"\n                mg_ampl=\"{mg_ampl}\"\n                mg_freq=\"{mg_freq}\"/>\n            <SetMGGoal   name=\"mg_goal1\"\n                mp_param_x=\"{mp_1_x}\"\n                mp_param_y=\"{mp_1_y}\"\n                mp_param_z=\"{mp_1_z}\"\n                mg_trans_x=\"{mg_trans_x}\"\n                mg_trans_y=\"{mg_trans_y}\"\n                mg_trans_z=\"{mg_trans_z}\"/>\n        </Parallel>\n    </ReactiveFallback>\n    </BehaviorTree>\n</root>"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree represents a robot's decision-making process. It begins by checking the battery and cleaning, with both actions being inverted (i.e., if one fails, the other is attempted). If both of these fail, the robot will then proceed to recharge its battery. This sequence ensures that the robot prioritizes maintaining functionality by attempting to address issues with its battery or cleanliness before resorting to recharging.", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Sequence>\n            <Fallback>\n                <Inverter>\n                    <Action ID=\"CheckBattery\"/>\n                </Inverter>\n                <Inverter>\n                    <Action ID=\"CleanAction\"/>\n                </Inverter>\n            </Fallback>\n            <Action ID=\"Recharge\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CheckBattery\"/>\n        <Action ID=\"CleanAction\"/>\n        <Action ID=\"Recharge\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree is designed for a robotic system to execute a sequence of actions based on certain conditions and inputs. The main behavior tree consists of a repeat node that cycles through a sequence containing various sub-tasks.\n\nWithin the sequence, there are conditional checks, reactive sequences, and actions such as movement, staying in place, guiding, and updating the state. These actions are influenced by input parameters like the current action type, desired sequences, and execution states.\n\nThe tree also includes nodes for handling locomotion status, recovery, and replanning requests at different levels. The behavior tree seems to be part of a complex decision-making system for controlling the robot's behavior in dynamic environments.\n\nOverall, the behavior tree orchestrates the robot's actions, responses to environmental changes, and ensures the fulfillment of desired sequences while allowing for adaptation and recovery through replanning requests.", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Repeat num_cycles=\"{num_cycles}\">\n            <Sequence>\n                <Fallback>\n                    <Condition ID=\"LTLPreCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\"/>\n                    <ForceFailure>\n                        <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                    </ForceFailure>\n                </Fallback>\n                <ReactiveSequence>\n                    <Fallback>\n                        <Condition ID=\"ReactiveLTLStateCheck\" ltl_state_current=\"{ltl_state_current}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel2\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                    <Fallback>\n                        <Switch4 case_1=\"move\" case_2=\"stay\" case_3=\"start_training\" case_4=\"terminate_training\" variable=\"{bt_action_type}\">\n                            <Action ID=\"MoveAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" goal_sent=\"{goal_sent}\" move_base_finished=\"{move_base_finished}\" move_base_idle=\"{move_base_idle}\"/>\n                            <Action ID=\"StayAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"GuideAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <Action ID=\"BackNormalAction\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_current=\"{ltl_state_current}\"/>\n                            <AlwaysFailure/>\n                        </Switch4>\n                        <ForceFailure>\n                            <Action ID=\"ReplanningRequestLevel3\" ltl_state_current=\"{ltl_state_current}\" ltl_state_executed_sequence=\"{ltl_state_executed_sequence}\" replanning_request=\"{replanning_request}\"/>\n                        </ForceFailure>\n                    </Fallback>\n                </ReactiveSequence>\n                <Action ID=\"UpdateLTL\" action_sequence=\"{action_sequence}\" action_sequence_executed=\"{action_sequence_executed}\" bt_action_type=\"{bt_action_type}\" current_action=\"{current_action}\" ltl_state_desired_sequence=\"{ltl_state_desired_sequence}\"/>\n            </Sequence>\n        </Repeat>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"BackNormalAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"DropAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"GuideAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"LTLPreCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n        </Condition>\n        <Action ID=\"LocomotionStart\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Condition ID=\"LocomotionStatusCheck\">\n            <input_port name=\"locomotion_status\"/>\n        </Condition>\n        <Action ID=\"MoveAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <output_port name=\"goal_sent\"/>\n            <input_port name=\"move_base_finished\"/>\n            <input_port name=\"move_base_idle\"/>\n        </Action>\n        <Action ID=\"PickAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Condition ID=\"ReactiveLTLStateCheck\">\n            <input_port name=\"ltl_state_current\"/>\n            <input_port name=\"ltl_state_desired_sequence\"/>\n        </Condition>\n        <Action ID=\"RecoveryStand\">\n            <input_port name=\"locomotion_status\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel1\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel2\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"ReplanningRequestLevel3\">\n            <input_port name=\"ltl_state_current\"/>\n            <inout_port name=\"ltl_state_executed_sequence\"/>\n            <inout_port name=\"replanning_request\"/>\n        </Action>\n        <Action ID=\"StayAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"SynchronizedTransitionAction\">\n            <input_port name=\"bt_action_type\"/>\n            <input_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_current\"/>\n        </Action>\n        <Action ID=\"UpdateLTL\">\n            <inout_port name=\"action_sequence\"/>\n            <inout_port name=\"action_sequence_executed\"/>\n            <output_port name=\"bt_action_type\"/>\n            <output_port name=\"current_action\"/>\n            <inout_port name=\"ltl_state_desired_sequence\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree outlines the decision-making process for an animal in a simulated environment. The tree's structure is based on various conditions and actions that the animal can perform.\n\nThe tree begins with a FallbackStar node, which contains three SequenceStar nodes. Each SequenceStar represents a set of conditions and actions to be executed based on the state of the environment and the animal itself.\n\nThe first SequenceStar deals with the animal's movement during the day, either leaving the shed and finding a random pasture field or moving if it's already on the pasture.\n\nThe second SequenceStar handles the animal's behavior at night, focusing on finding shelter if not in the shed and entering it, or continuing to move if already on the pasture.\n\nThe third SequenceStar addresses daytime activities when not in the shed, involving random movement.\n\nThe TreeNodesModel provides a list of all possible conditions and actions that the animal can evaluate and execute within the behavior tree, such as eating prey, laying eggs, and finding retreats.\n\nIn", "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <FallbackStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsDay\"/>\n                <Condition ID=\"IsInShed\"/>\n                <Action ID=\"LeaveShed\"/>\n                <Action ID=\"FindRandomPastureField\"/>\n                <Action ID=\"Move\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsOnPasture\"/>\n                <Condition ID=\"IsNight\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"FindShed\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EnterShed\"/>\n            </SequenceStar>\n            <SequenceStar>\n                <Condition ID=\"IsDay\"/>\n                <Inverter>\n                    <Condition ID=\"IsInShed\"/>\n                </Inverter>\n                <Action ID=\"RandomMove\"/>\n            </SequenceStar>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Condition ID=\"CanHaveSex\"/>\n        <Action ID=\"EatPrey\"/>\n        <Action ID=\"EnterShed\"/>\n        <Action ID=\"FindPrey\"/>\n        <Action ID=\"FindRandomPastureField\"/>\n        <Action ID=\"FindRetreat\"/>\n        <Action ID=\"FindShed\"/>\n        <Action ID=\"GiveBirth\"/>\n        <Condition ID=\"IsAdult\"/>\n        <Condition ID=\"IsCarnivore\"/>\n        <Condition ID=\"IsDay\"/>\n        <Condition ID=\"IsEgg\"/>\n        <Condition ID=\"IsEggLayer\"/>\n        <Condition ID=\"IsFemale\"/>\n        <Condition ID=\"IsHerbivore\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInShed\"/>\n        <Condition ID=\"IsMale\"/>\n        <Condition ID=\"IsNight\"/>\n        <Condition ID=\"IsOnPasture\"/>\n        <Condition ID=\"IsPregnant\"/>\n        <Condition ID=\"IsProducer\"/>\n        <Condition ID=\"IsReadyToGiveBirth\"/>\n        <Condition ID=\"IsWoodVermin\"/>\n        <Condition ID=\"IsYoung\"/>\n        <Action ID=\"KillPrey\"/>\n        <Action ID=\"LayEgg\"/>\n        <Action ID=\"LeaveShed\"/>\n        <Action ID=\"Move\"/>\n        <Action ID=\"Produce\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"Sleep\"/>\n        <Action ID=\"TryHaveSex\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree orchestrates the actions of a robotic system. It begins by attempting to detect faces and then selects a specific face from the detected ones. The robot then performs parallel tasks, gazing at the selected face while also checking if the face's x-coordinate is less than 1.0. If it is, the robot stretches its arm; otherwise, it moves its arms to a home position. After this, the robot repeats the process or moves its arms to a low position.\n\nIf an error state occurs, the robot speaks in Portuguese, waits for 60 seconds, and then repeats the process. Additionally, there are various predefined actions such as moving the robot's base, detecting blocks, speaking, and waiting for a specified amount of time.\n\nThe behavior tree indicates that the robot is designed to interact with its environment, perform specific actions based on detected stimuli, handle errors, and execute predefined behaviors.", "output": "<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <Fallback>\n            <Sequence>\n                <Action pose_array=\"face_array\" topic=\"faces\" ID=\"GetPoseArray\" name=\"GetFaceList\"/>\n                <Action pose_array=\"{face_array}\" ID=\"SelectPose\" pose_stamped=\"face\" position_in_list=\"0\"/>\n                <Parallel threshold=\"2\">\n                    <Action ID=\"GazeAtTarget\" fixation_pose=\"{face}\" frame_id=\"base_footprint\" action_name=\"gaze\"/>\n                    <Fallback>\n                        <Sequence>\n                            <Action output_val=\"x_thresh\" ID=\"SelectFieldFromPoseStamped\" field=\"x\" pose_stamped=\"{face}\"/>\n                            <Condition ID=\"CompareDouble\" A=\"{x_thresh}\" Condition=\"&lt;\" B=\"1.0\"/>\n                            <ReactiveSequence>\n                                <Action output_val=\"y_thresh\" ID=\"SelectFieldFromPoseStamped\" field=\"y\" pose_stamped=\"{face}\"/>\n                                <Action topic=\"/vizzyArmRoutines/command\" ID=\"ArmRoutines\" gesture=\"STRETCH\"/>\n                            </ReactiveSequence>\n                        </Sequence>\n                        <SubTree ID=\"LowArms\"/>\n                    </Fallback>\n                </Parallel>\n            </Sequence>\n            <SubTree ID=\"LowArms\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ErrorGameState\">\n        <SequenceStar>\n            <Action ID=\"Speak\" language=\"pt_PT\" action_name=\"nuance_speech_tts\" voice=\"Joaquim\" utterance=\"N\u00e3o sei o estado do jogo\"/>\n            <Action ID=\"Speak\" language=\"pt_PT\" action_name=\"nuance_speech_tts\" voice=\"Joaquim\" utterance=\"Chamem o assistente\"/>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"60\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"LowArms\">\n        <Action topic=\"/vizzyArmRoutines/command\" ID=\"ArmRoutines\" gesture=\"HOME\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\"/>\n            <input_port name=\"action_name\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <SubTree ID=\"ErrorGameState\"/>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"GetInt16\">\n            <output_port name=\"number\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"GetPoseArray\">\n            <output_port name=\"pose_array\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"goal_pose\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void> >\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"SelectFieldFromPoseStamped\">\n            <input_port name=\"field\"/>\n            <output_port name=\"output_val\"/>\n            <input_port name=\"pose_stamped\"/>\n        </Action>\n        <Action ID=\"SelectPose\">\n            <input_port name=\"pose_array\"/>\n            <output_port name=\"pose_stamped\"/>\n            <input_port name=\"position_in_list\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port default=\"SUCCESS\" name=\"result\">Result after specified time: SUCCESS or FAILURE</input_port>\n            <input_port default=\"5\" name=\"seconds\">Time in seconds</input_port>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree orchestrates the charging process for a robot. Initially, it triggers a sub-tree \"ChargeST\" to manage the charging sequence. Within \"ChargeST\", the robot first speaks a message in Portuguese, then moves to a specific location while attempting multiple times if necessary. Subsequently, it either charges or repeats speaking a phrase five times in parallel. After a brief wait, the robot speaks another message and stops charging.\n\nAdditionally, the behavior tree defines various actions and conditions that can be utilized within the tree, such as moving the robot's base, speaking messages, waiting for a specified duration, checking battery status, detecting faces, and more.\n\nOverall, the behavior tree outlines a comprehensive charging routine for the robot, incorporating speech interactions, movement, and monitoring of the charging process.", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"BehaviorTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"BehaviorTree\">\n        <SubTree ID=\"ChargeST\"/>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <BehaviorTree ID=\"ChargeST\">\n        <SequenceStar>\n            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Tenho fome\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"WaitForXSeconds\" name=\"Wait2Seconds\" result=\"SUCCESS\" seconds=\"2\"/>\n            <Fallback>\n                <SequenceStar>\n                    <RetryUntilSuccesful num_attempts=\"3\">\n                        <Action ID=\"MoveBase\" action_name=\"move_base\" frame_id=\"map\" goal_pose=\"-1.7971;-5.5118;0.0;0;0;0.72703;0.68659\" name=\"Go to first point\"/>\n                    </RetryUntilSuccesful>\n                    <Parallel failure_threshold=\"1\" success_threshold=\"2\">\n                        <Action ID=\"Charge\" action=\"CHARGE\" action_name=\"charging_action\"/>\n                        <Repeat num_cycles=\"5\">\n                            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"bip bip\" voice=\"pt-PT-Wavenet-D\"/>\n                        </Repeat>\n                    </Parallel>\n                </SequenceStar>\n            </Fallback>\n            <Action ID=\"WaitForXSeconds\" result=\"SUCCESS\" seconds=\"10\"/>\n            <Action ID=\"Speak\" action_name=\"/gcloud_tts\" language=\"pt_PT\" utterance=\"Estou cheio, vou sair da esta\u00e7\u00e3o\" voice=\"pt-PT-Wavenet-D\"/>\n            <Action ID=\"Charge\" action=\"STOP_CHARGE\" action_name=\"charging_action\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"ArmCartesian\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"frame_id\"/>\n            <input_port name=\"pose\"/>\n            <input_port name=\"type\"/>\n        </Action>\n        <Action ID=\"ArmRoutines\">\n            <input_port name=\"gesture\"/>\n            <input_port name=\"topic\"/>\n        </Action>\n        <Action ID=\"Charge\">\n            <input_port name=\"action\" type=\"std::string\"/>\n            <input_port name=\"action_name\" type=\"std::string\"/>\n        </Action>\n        <SubTree ID=\"ChargeST\"/>\n        <Action ID=\"CheckBattery\">\n            <output_port name=\"battery_state\" type=\"int\"/>\n            <output_port name=\"percentage\" type=\"double\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CheckBool\">\n            <input_port name=\"variable\"/>\n        </Condition>\n        <Action ID=\"CheckCharging\">\n            <output_port name=\"charging_state\" type=\"int\"/>\n            <input_port name=\"service_name\" type=\"std::string\"/>\n        </Action>\n        <Condition ID=\"CompareDouble\">\n            <input_port name=\"A\"/>\n            <input_port name=\"B\"/>\n            <input_port name=\"Condition\"/>\n        </Condition>\n        <Condition ID=\"CompareInt\">\n            <input_port name=\"A\" type=\"int\"/>\n            <input_port name=\"B\" type=\"int\"/>\n            <input_port name=\"Condition\" type=\"std::string\"/>\n        </Condition>\n        <Action ID=\"DetectBlocks\">\n            <output_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"block_topic\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"DetectFaces\">\n            <output_port name=\"faceListOut\"/>\n            <input_port name=\"face_topic\"/>\n        </Action>\n        <Action ID=\"FaceCounter\">\n            <input_port name=\"faceListIn\"/>\n            <input_port name=\"number_faces\"/>\n        </Action>\n        <Action ID=\"GazeAtTarget\">\n            <input_port name=\"action_name\"/>\n            <input_port name=\"fixation_pose\"/>\n            <input_port name=\"frame_id\"/>\n        </Action>\n        <Action ID=\"MoveBase\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"frame_id\" type=\"std::string\"/>\n            <input_port name=\"goal_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n        </Action>\n        <Action ID=\"SelectBlock\">\n            <input_port name=\"block_list\" type=\"social_cues::BlockList_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <output_port name=\"block_pose\" type=\"geometry_msgs::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;\"/>\n            <input_port name=\"position_in_list\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"Speak\">\n            <input_port name=\"action_name\" type=\"std::string\"/>\n            <input_port name=\"language\" type=\"std::string\"/>\n            <input_port name=\"utterance\" type=\"std::string\"/>\n            <input_port name=\"voice\" type=\"std::string\"/>\n        </Action>\n        <Action ID=\"WaitForXSeconds\">\n            <input_port name=\"result\" type=\"std::string\"/>\n            <input_port name=\"seconds\" type=\"std::string\"/>\n        </Action>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree is designed for the auto-localization task of a robot. It first checks if the initial pose has been received. If so, it attempts to perform self-localization. The self-localization process involves making a global localization service request and retrying up to 5 times if unsuccessful. Then, it retries the localization process up to 10 times, where it checks if the robot is localized. If not, it performs a sequence of spinning, backing up, and spinning again before checking for localization once more. This process continues until successful localization is achieved.", "output": "<!--AutoLocalization-->\n<root main_tree_to_execute=\"MainTree\">\n  <BehaviorTree ID=\"MainTree\">\n    <FallbackStar name=\"root_AutoLocalization\">\n      <initialPoseReceived/>\n      <SequenceStar name=\"doSelfLocalization\">\n        <RetryUntilSuccesful num_attempts=\"5\" name=\"retry_client_request\">\n          <globalLocalizationServiceRequest/>\n        </RetryUntilSuccesful>\n        <RetryUntilSuccesful num_attempts=\"10\" name=\"retry_localization\">\n          <Sequence>\n            <Fallback>\n              <IsLocalized/>\n              <SequenceStar>\n               <Spin/>\n               <BackUp/>\n               <Spin/>\n             </SequenceStar>\n            </Fallback>\n            <IsLocalized/>\n          </Sequence> \n        </RetryUntilSuccesful>\n      </SequenceStar>\n    </FallbackStar>\n  </BehaviorTree>\n</root>"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "This behavior tree orchestrates the decision-making and actions of a character in a simulated environment. The character is programmed to perform various tasks based on its needs, job assignments, and environmental conditions.\n\nThe main behavior tree \"MainTree\" encompasses several sub-trees for handling different scenarios:\n1. AlarmTree: Manages the response to an alarm, including seeking safety or aborting the current task.\n2. Combat: Handles combat situations, including engaging targets and aborting the current task if necessary.\n3. Mission: Coordinates actions related to mission execution, such as leaving for and returning from a mission.\n4. Needs: Addresses the character's basic needs like hunger, thirst, and sleep, ensuring they are fulfilled.\n5. GnomeStandard: Covers standard activities like obtaining uniforms, bandages, training, and performing regular jobs.\n6. Jobs: Orchestrates various job-related tasks, including butchering animals, dyeing animals, leading animals to pasture, harvesting animals, hauling multiple items,", "output": "<root main_tree_to_execute=\"MainTree\">\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"AlarmTree\">\n        <SequenceStar>\n            <Condition ID=\"Alarm\"/>\n            <Condition ID=\"IsCivilian\"/>\n            <Action ID=\"AbortJob\"/>\n            <Fallback>\n                <SequenceStar>\n                    <Condition ID=\"IsInSafeRoom\"/>\n                    <Action ID=\"RandomMove\"/>\n                </SequenceStar>\n                <SequenceStar>\n                    <Action ID=\"GetSafeRoomPosition\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </Fallback>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Combat\">\n        <SequenceStar>\n            <Fallback>\n                <Condition ID=\"IsInCombat\"/>\n                <Condition ID=\"HasHuntTarget\"/>\n            </Fallback>\n            <Action ID=\"AbortJob\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"GetTarget\"/>\n                    <Action ID=\"Move\"/>\n                    <Sequence>\n                        <Condition ID=\"TargetAdjacent\"/>\n                        <Action ID=\"AttackTarget\"/>\n                    </Sequence>\n                </SequenceStar>\n            </ForceSuccess>\n            <Condition ID=\"IsInCombat\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"GetUniform\">\n        <SequenceStar name=\"GetUniform\">\n            <Action ID=\"CheckUniform\"/>\n            <Fallback>\n                <Action ID=\"Move\"/>\n                <Action ID=\"UniformCleanUp\"/>\n            </Fallback>\n            <Action ID=\"EquipUniform\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Hunger\">\n        <SequenceStar>\n            <Condition ID=\"IsHungry\"/>\n            <Sequence>\n                <SequenceStar name=\"Hunger\">\n                    <Action ID=\"FindFood\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Eat\"/>\n                </SequenceStar>\n                <Condition ID=\"IsFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobButcherAnimal\">\n        <BB_Precondition expected=\"ButcherAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ButcherAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobDyeAnimal\">\n        <BB_Precondition expected=\"DyeAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"ClaimItems\"/>\n                    <SubTree ID=\"MoveAllItemsToJob\"/>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"DyeAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHarvestAnimal\">\n        <BB_Precondition expected=\"HarvestAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"HarvestAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobHaulMultiple\">\n        <BB_Precondition expected=\"HauleMultipleItems\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitJob\"/>\n                    <Action ID=\"FindTool\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"EquipTool\"/>\n                    <Inverter>\n                        <Sequence>\n                            <Inverter>\n                                <Condition ID=\"AllPickedUp\"/>\n                            </Inverter>\n                            <Sequence>\n                                <Action ID=\"Move\"/>\n                                <Action ID=\"PickUpItem\"/>\n                            </Sequence>\n                            <Action ID=\"ReturnAlwaysRunning\"/>\n                        </Sequence>\n                    </Inverter>\n                    <Condition ID=\"AllPickedUp\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"DropAllItems\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobLeadAnimalToPasture\">\n        <BB_Precondition expected=\"LeadAnimalToPasture\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobStandard\">\n        <Fallback>\n            <SequenceStar name=\"StandardJobs\">\n                <Action ID=\"InitJob\"/>\n                <Action ID=\"ClaimItems\"/>\n                <Action ID=\"FindTool\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"EquipTool\"/>\n                <SubTree ID=\"MoveAllItemsToJob\"/>\n                <Action ID=\"GetWorkPosition\"/>\n                <Action ID=\"Move\"/>\n                <Action ID=\"Work\"/>\n                <Action ID=\"FinishJob\"/>\n            </SequenceStar>\n            <Action ID=\"AbortJob\"/>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"JobTameAnimal\">\n        <BB_Precondition expected=\"TameAnimal\" key=\"JobType\">\n            <Fallback>\n                <SequenceStar>\n                    <Action ID=\"InitAnimalJob\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"TameAnimal\"/>\n                    <Action ID=\"GrabAnimal\"/>\n                    <Action ID=\"GetItemDropPosition\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"FinalMoveAnimal\"/>\n                    <Action ID=\"ReleaseAnimal\"/>\n                    <Action ID=\"FinishJob\"/>\n                </SequenceStar>\n                <Action ID=\"AbortJob\"/>\n            </Fallback>\n        </BB_Precondition>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Jobs\">\n        <SequenceStar>\n            <Action ID=\"GetJob\"/>\n            <FallbackStar>\n                <SubTree ID=\"JobButcherAnimal\"/>\n                <SubTree ID=\"JobDyeAnimal\"/>\n                <SubTree ID=\"JobLeadAnimalToPasture\"/>\n                <SubTree ID=\"JobHarvestAnimal\"/>\n                <SubTree ID=\"JobTameAnimal\"/>\n                <SubTree ID=\"JobHaulMultiple\"/>\n                <SubTree ID=\"JobStandard\"/>\n            </FallbackStar>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MainTree\">\n        <Fallback>\n            <SubTree ID=\"AlarmTree\"/>\n            <SubTree ID=\"Combat\"/>\n            <SubTree ID=\"Mission\"/>\n            <FallbackStar name=\"Needs\">\n                <SubTree ID=\"Hunger\"/>\n                <SubTree ID=\"Thirst\"/>\n                <SubTree ID=\"Sleepy\"/>\n            </FallbackStar>\n            <FallbackStar name=\"GnomeStandard\">\n                <FallbackStar>\n                    <SubTree ID=\"GetUniform\"/>\n                    <SubTree ID=\"PickUpBandages\"/>\n                    <SubTree ID=\"Training\"/>\n                    <SubTree ID=\"Trainer\"/>\n                </FallbackStar>\n                <SubTree ID=\"Jobs\"/>\n                <Action ID=\"RandomMove\"/>\n            </FallbackStar>\n        </Fallback>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Mission\">\n        <SequenceStar>\n            <Condition ID=\"IsOnMission\"/>\n            <Action ID=\"AbortJob\"/>\n            <Action ID=\"GetExitPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"LeaveForMission\"/>\n            <Action ID=\"DoMission\"/>\n            <Action ID=\"ReturnFromMission\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"MoveAllItemsToJob\">\n        <Sequence>\n            <Inverter>\n                <Sequence>\n                    <Inverter>\n                        <Condition ID=\"AllItemsInPlaceForJob\"/>\n                    </Inverter>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Action ID=\"GetItemDropPosition\"/>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Action ID=\"ReturnAlwaysRunning\"/>\n                </Sequence>\n            </Inverter>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"OldMoveAllItemsToJob\">\n        <FallbackStar>\n            <Condition ID=\"AllItemsInPlaceForJob\"/>\n            <RetryUntilSuccesful num_attempts=\"20\">\n                <Sequence>\n                    <SequenceStar>\n                        <Action ID=\"Move\"/>\n                        <Action ID=\"PickUpItem\"/>\n                        <Fallback>\n                            <Action ID=\"GetItemDropPosition\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Fallback>\n                            <Action ID=\"Move\"/>\n                            <Action ID=\"DropItem\"/>\n                        </Fallback>\n                        <Action ID=\"DropItem\"/>\n                    </SequenceStar>\n                    <Condition ID=\"AllItemsInPlaceForJob\"/>\n                </Sequence>\n            </RetryUntilSuccesful>\n            <ForceFailure>\n                <Action ID=\"AbortJob\"/>\n            </ForceFailure>\n        </FallbackStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"PickUpBandages\">\n        <SequenceStar>\n            <Action ID=\"CheckBandages\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"PickUpItem\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Sleepy\">\n        <SequenceStar name=\"Sleep\">\n            <Condition ID=\"IsSleepy\"/>\n            <ForceSuccess>\n                <SequenceStar>\n                    <Action ID=\"FindBed\"/>\n                    <Action ID=\"Move\"/>\n                </SequenceStar>\n            </ForceSuccess>\n            <Action ID=\"Sleep\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Thirst\">\n        <SequenceStar>\n            <Condition ID=\"IsThirsty\"/>\n            <Sequence>\n                <SequenceStar name=\"Thirst\">\n                    <Action ID=\"FindDrink\"/>\n                    <Action ID=\"Move\"/>\n                    <Action ID=\"PickUpItem\"/>\n                    <ForceSuccess>\n                        <SequenceStar>\n                            <Action ID=\"FindDining\"/>\n                            <Action ID=\"Move\"/>\n                        </SequenceStar>\n                    </ForceSuccess>\n                    <Action ID=\"Drink\"/>\n                </SequenceStar>\n                <Condition ID=\"IsDrinkFull\"/>\n            </Sequence>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Trainer\">\n        <SequenceStar name=\"Trainer\">\n            <Condition ID=\"IsTrainer\"/>\n            <Action ID=\"FindTrainerPosition\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"SuperviseTraining\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <BehaviorTree ID=\"Training\">\n        <SequenceStar name=\"Training\">\n            <Condition ID=\"IsTrainingTime\"/>\n            <Action ID=\"FindTrainingGround\"/>\n            <Action ID=\"Move\"/>\n            <Action ID=\"Train\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    <!--  ===================================  -->\n    <TreeNodesModel>\n        <Action ID=\"AbortJob\"/>\n        <Condition ID=\"Alarm\"/>\n        <SubTree ID=\"AlarmTree\"/>\n        <Condition ID=\"AllItemsInPlaceForJob\"/>\n        <Condition ID=\"AllPickedUp\"/>\n        <Action ID=\"AttackTarget\"/>\n        <Action ID=\"ButcherAnimal\"/>\n        <Action ID=\"CheckBandages\"/>\n        <Action ID=\"CheckUniform\"/>\n        <Action ID=\"ClaimItems\"/>\n        <SubTree ID=\"Combat\"/>\n        <Action ID=\"DoMission\"/>\n        <Action ID=\"Drink\"/>\n        <Action ID=\"DropAllItems\"/>\n        <Action ID=\"DropItem\"/>\n        <Action ID=\"DyeAnimal\"/>\n        <Action ID=\"Eat\"/>\n        <Action ID=\"EnterMap\"/>\n        <Action ID=\"EquipTool\"/>\n        <Action ID=\"EquipUniform\"/>\n        <Action ID=\"FinalMoveAnimal\"/>\n        <Action ID=\"FindBed\"/>\n        <Action ID=\"FindDining\"/>\n        <Action ID=\"FindDrink\"/>\n        <Action ID=\"FindFood\"/>\n        <Action ID=\"FindTool\"/>\n        <Action ID=\"FindTrainerPosition\"/>\n        <Action ID=\"FindTrainingGround\"/>\n        <Action ID=\"FinishJob\"/>\n        <Action ID=\"GetExitPosition\"/>\n        <Action ID=\"GetItemDropPosition\"/>\n        <Action ID=\"GetJob\"/>\n        <Action ID=\"GetSafeRoomPosition\"/>\n        <Action ID=\"GetTarget\"/>\n        <SubTree ID=\"GetUniform\"/>\n        <Action ID=\"GetWorkPosition\"/>\n        <Action ID=\"GrabAnimal\"/>\n        <Action ID=\"HarvestAnimal\"/>\n        <Condition ID=\"HasHuntTarget\"/>\n        <SubTree ID=\"Hunger\"/>\n        <Action ID=\"InitAnimalJob\"/>\n        <Action ID=\"InitButcherJob\"/>\n        <Action ID=\"InitJob\"/>\n        <Condition ID=\"IsButcherJob\"/>\n        <Condition ID=\"IsCivilian\"/>\n        <Condition ID=\"IsDrinkFull\"/>\n        <Condition ID=\"IsFull\"/>\n        <Condition ID=\"IsHungry\"/>\n        <Condition ID=\"IsInCombat\"/>\n        <Condition ID=\"IsInSafeRoom\"/>\n        <Condition ID=\"IsOnMission\"/>\n        <Condition ID=\"IsSleepy\"/>\n        <Condition ID=\"IsThirsty\"/>\n        <Condition ID=\"IsTrainer\"/>\n        <Condition ID=\"IsTrainingTime\"/>\n        <Condition ID=\"IsVeryHungry\"/>\n        <Condition ID=\"IsVeryThirsty\"/>\n        <SubTree ID=\"JobButcherAnimal\"/>\n        <SubTree ID=\"JobDyeAnimal\"/>\n        <SubTree ID=\"JobHarvestAnimal\"/>\n        <SubTree ID=\"JobHaulMultiple\"/>\n        <SubTree ID=\"JobLeadAnimalToPasture\"/>\n        <SubTree ID=\"JobStandard\"/>\n        <SubTree ID=\"JobTameAnimal\"/>\n        <SubTree ID=\"Jobs\"/>\n        <Action ID=\"LeaveForMission\"/>\n        <Action ID=\"LeaveMap\"/>\n        <SubTree ID=\"Mission\"/>\n        <Action ID=\"Move\"/>\n        <SubTree ID=\"MoveAllItemsToJob\"/>\n        <SubTree ID=\"OldMoveAllItemsToJob\"/>\n        <SubTree ID=\"PickUpBandages\"/>\n        <Action ID=\"PickUpItem\"/>\n        <Action ID=\"RandomMove\"/>\n        <Action ID=\"ReleaseAnimal\"/>\n        <Action ID=\"ReturnAlwaysRunning\"/>\n        <Action ID=\"ReturnFromMission\"/>\n        <Action ID=\"Sleep\"/>\n        <SubTree ID=\"Sleepy\"/>\n        <Action ID=\"SuperviseTraining\"/>\n        <Action ID=\"TameAnimal\"/>\n        <Condition ID=\"TargetAdjacent\"/>\n        <SubTree ID=\"Thirst\"/>\n        <Action ID=\"Train\"/>\n        <SubTree ID=\"Trainer\"/>\n        <SubTree ID=\"Training\"/>\n        <Action ID=\"UniformCleanUp\"/>\n        <Action ID=\"Work\"/>\n    </TreeNodesModel>\n    <!--  ===================================  -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree outlines the decision-making process for a robot navigating through obstacles. The robot is programmed to follow a sequence of actions: first, attempting to pass through a door; if that fails, it will then attempt to pass through a window. If both attempts fail, it will resort to closing the door.\n\nAdditionally, the tree includes specific actions that the robot can take, such as opening or closing a door, and passing through a door or window. It also checks whether the door is open before taking any action.\n\nIn summary, the behavior tree orchestrates the robot's navigation through obstacles by defining a series of actions and conditions, enabling it to make decisions based on its environment.", "output": "<?xml version=\"1.0\"?>\n<root main_tree_to_execute=\"MainTree\">\n    <!-- ////////// -->\n    <BehaviorTree ID=\"MainTree\">\n        <Sequence name=\"SeqA\">\n            <Fallback name=\"root_Fallback\">\n                <Sequence name=\"SeqB\">\n                    <Action ID=\"PassThroughDoor\"/>\n                </Sequence>\n                <Sequence name=\"SeqE\">\n                    <Action ID=\"PassThroughWindow\"/>\n                    <Action ID=\"PassThroughWindow\"/>\n                </Sequence>\n            </Fallback>\n            <Action ID=\"CloseDoor\"/>\n        </Sequence>\n    </BehaviorTree>\n    <!-- ////////// -->\n    <TreeNodesModel>\n        <Action ID=\"CloseDoor\"/>\n        <Condition ID=\"IsDoorOpen\"/>\n        <Action ID=\"OpenDoor\"/>\n        <Action ID=\"PassThroughDoor\"/>\n        <Action ID=\"PassThroughWindow\"/>\n    </TreeNodesModel>\n    <!-- ////////// -->\n</root>\n\n"}, {"instruction": "You will be provided a summary of a task performed by a behavior tree, and your objective is to express this behavior tree in XML format.", "input": "The behavior tree instructs an entity to perform two actions in sequence. First, it is directed to say \"Hello World\", and then to execute the action \"SayHello\". This indicates a simple task where the entity is expected to communicate a greeting message followed by another action related to saying hello.", "output": "<root main_tree_to_execute=\"SayStuff\">\n\n    <BehaviorTree ID=\"SayStuff\">\n        <SequenceStar>\n            <Action ID=\"SaySomething\" message=\"Hello World\"/>\n            <Action ID=\"SayHello\"/>\n        </SequenceStar>\n    </BehaviorTree>\n    \n</root>\n"}]